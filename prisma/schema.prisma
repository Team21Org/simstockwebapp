// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  bio       String?
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  portfolio Portfolio?
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  fullName  String
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAdmin   Boolean  @default(false)
}

model Stock {
  id           Int       @id @default(autoincrement())
  stockId      Int       @unique
  ticker       String    @unique
  companyName  String?
  currentPrice Decimal   @default(0.00) @db.Money
  openPrice    Decimal   @default(0.00) @db.Money
  dayHigh      Decimal   @default(0.00) @db.Money
  dayLow       Decimal   @default(0.00) @db.Money
  dailyVolume  Int       @default(0)
  boughtStock  Portfolio @relation(fields: [stockId], references: [id])
}

model Portfolio {
  id          Int      @id @default(autoincrement())
  portfolioId Int      @unique
  cash        Decimal  @default(0.00) @db.Money
  totalValue  Decimal  @default(0.00) @db.Money
  // The total value is calculated as the sum of cash and the value of all stocks in the portfolio
  // This can be calculated dynamically in your application logic
  user        Profile  @relation(fields: [portfolioId], references: [id])
  stocks      Stock[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
