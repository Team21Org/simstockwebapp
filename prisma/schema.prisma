generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String
  userName      String
  emailVerified DateTime?
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  profile       Profile?
  sessions      Session[]
  Transaction   Transaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Profile {
  userId      String     @unique
  Name        String?
  email       String     @unique
  bio         String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  portfolioId String?
  Portfolio   Portfolio?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, email])
}

model Portfolio {
  id           String           @id @default(cuid())
  cash         Decimal          @default(0.00) @db.Money
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  totalValue   Decimal          @default(0.00) @db.Money
  profileId    String           @unique
  user         Profile          @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  stocks       PortfolioStock[]
  transactions Transaction[]
}

model Stock {
  id              String           @id @default(cuid())
  stockId         String           @unique
  ticker          String           @unique
  companyName     String?
  currentPrice    Decimal          @default(0.00) @db.Money
  openPrice       Decimal          @default(0.00) @db.Money
  dayHigh         Decimal          @default(0.00) @db.Money
  dayLow          Decimal          @default(0.00) @db.Money
  dailyVolume     Int              @default(0)
  createdAt       DateTime         @default(now())
  initialVolume   Int
  updatedAt       DateTime         @updatedAt
  portfolioStocks PortfolioStock[]
  transactions    Transaction[]
}

model Transaction {
  id          String       @id @default(cuid())
  userId      String
  type        TransactType
  stockId     String?
  quantity    Int          @default(1)
  amount      Decimal      @default(0.00) @db.Money
  createdAt   DateTime     @default(now())
  portfolioId String
  portfolio   Portfolio    @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  stock       Stock?       @relation(fields: [stockId], references: [stockId], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PortfolioStock {
  id          String    @id @default(uuid())
  portfolioId String
  stockId     String
  quantity    Int       @default(0)
  averageCost Decimal   @default(0.00) @db.Money
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  stock       Stock     @relation(fields: [stockId], references: [stockId], onDelete: Cascade)

  @@unique([portfolioId, stockId])
}

model MarketSchedule {
  id        Int      @id @default(autoincrement())
  startTime String   @default("09:00")
  endTime   String   @default("17:00")
  holiday   String[] @default(["Labor Day", "Thanksgiving", "Christmas", "New Year's Day", "Independence Day", "Memorial Day", "Veterans Day", "Martin Luther King Jr. Day", "Presidents' Day", "Columbus Day"])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum TransactType {
  BUY
  SELL
  DEPOSIT
  WITHDRAW
}
