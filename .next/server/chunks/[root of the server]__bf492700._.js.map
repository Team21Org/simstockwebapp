{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Github%20Repositories/simstockwebapp/app/query/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getUserData, addUser } from \"@lib/user.js\";\r\nimport { getStockData, addStock } from \"@lib/stock.js\";\r\n\r\n// This script handles the API routing for the stock trading system simulator.\r\nexport const dynamic = \"force-static\";\r\nexport const revalidate = 1;\r\n\r\n\r\n// Main handler to route GET requests\r\nexport async function GET(req) {\r\n    const url = new URL(req.url);\r\n    const resource = url.searchParams.get(\"resource\");\r\n\r\n    if (!resource) {\r\n        return NextResponse.json({ error: \"Resource not specified\" }, { status: 400 });\r\n    }\r\n\r\n    let data;\r\n    try {\r\n        switch (resource) {\r\n            case \"user\":\r\n                data = await getUserData();\r\n                break;\r\n            case \"stock\":\r\n                data = await getStockData();\r\n                break;\r\n            default:\r\n                return NextResponse.json({ error: \"Invalid resource\" }, { status: 404 });\r\n        }\r\n\r\n        console.log(\"Fetched data:\", data);\r\n        return NextResponse.json(data);\r\n    } catch (err) {\r\n        console.error(\"Error retrieving data:\", err);\r\n        return NextResponse.json({ error: \"Error retrieving data\" }, { status: 500 });\r\n    }\r\n}\r\n\r\n// Main handler to route POST requests\r\nexport async function POST(req) {\r\n    const url = new URL(req.url);\r\n    const resource = url.searchParams.get(\"resource\");\r\n\r\n    if  (!resource) {\r\n        return NextResponse.json({ error: \"Resource not specified\" }, { status: 400 });\r\n    }\r\n\r\n    try {\r\n        let result;\r\n\r\n        switch (resource) {\r\n            case \"user\":\r\n                result = await addUser(req);\r\n                break;\r\n            case \"stock\":\r\n                result = await addStock(req);\r\n                break;\r\n            default:\r\n                return NextResponse.json({ error: \"Invalid resource\" }, { status: 404 });\r\n        }\r\n\r\n        console.log(\"Fetched Data\", result);\r\n        return NextResponse.json(result);\r\n    } catch (err) {\r\n        console.error(`Error handling POST for resource \"${resource}\":`, err);\r\n        return NextResponse.json({ error: \"Error handling POST request\" }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;AAKO,MAAM,UAAU;AAChB,MAAM,aAAa;AAInB,eAAe,IAAI,GAAG;IACzB,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;IAC3B,MAAM,WAAW,IAAI,YAAY,CAAC,GAAG,CAAC;IAEtC,IAAI,CAAC,UAAU;QACX,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAChF;IAEA,IAAI;IACJ,IAAI;QACA,OAAQ;YACJ,KAAK;gBACD,OAAO,MAAM;gBACb;YACJ,KAAK;gBACD,OAAO,MAAM;gBACb;YACJ;gBACI,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAmB,GAAG;oBAAE,QAAQ;gBAAI;QAC9E;QAEA,QAAQ,GAAG,CAAC,iBAAiB;QAC7B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ;AAGO,eAAe,KAAK,GAAG;IAC1B,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;IAC3B,MAAM,WAAW,IAAI,YAAY,CAAC,GAAG,CAAC;IAEtC,IAAK,CAAC,UAAU;QACZ,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAChF;IAEA,IAAI;QACA,IAAI;QAEJ,OAAQ;YACJ,KAAK;gBACD,SAAS,MAAM,QAAQ;gBACvB;YACJ,KAAK;gBACD,SAAS,MAAM,SAAS;gBACxB;YACJ;gBACI,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAmB,GAAG;oBAAE,QAAQ;gBAAI;QAC9E;QAEA,QAAQ,GAAG,CAAC,gBAAgB;QAC5B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,CAAC,kCAAkC,EAAE,SAAS,EAAE,CAAC,EAAE;QACjE,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACrF;AACJ","debugId":null}}]
}